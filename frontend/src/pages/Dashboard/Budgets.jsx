// Budget.jsx
import { useState, useEffect } from "react";
import useBudgetStore from "../../store/useBudgetStore";
import CreateBudgetForm from "../../components/CreateBudgetForm";

const defaultCategories = [
Â  "Food", "Transport", "Shopping", "Rent", "Entertainment", "Health", "Utilities", "Other"
];

const Budget = () => {
Â  const [goals, setGoals] = useState([
Â  Â  { name: "Monthly Savings", amount: 5000, category: "Other" }
Â  ]);
Â  const [newGoal, setNewGoal] = useState({ name: "", amount: "", category: "" });
Â  const [categories, setCategories] = useState(defaultCategories);
Â  const [newCategory, setNewCategory] = useState("");

Â  // Transaction state
Â  const [transaction, setTransaction] = useState({ category: "", amount: "", description: "" });
Â  const [selectedBudgetId, setSelectedBudgetId] = useState("");

Â  const { budgets, addSpending, fetchBudgets } = useBudgetStore();

Â  // Fetch budgets when the component mounts to populate the dropdown
Â  useEffect(() => {
Â  Â  fetchBudgets();
Â  }, [fetchBudgets]);

Â  // Add new goal
Â  const handleAddGoal = () => {
Â  Â  if (!newGoal.name || !newGoal.amount || !newGoal.category) return;
Â  Â  setGoals([...goals, { ...newGoal, amount: Number(newGoal.amount) }]);
Â  Â  setNewGoal({ name: "", amount: "", category: "" });
Â  };

Â  // Add new category
Â  const handleAddCategory = () => {
Â  Â  if (!newCategory || categories.includes(newCategory)) return;
Â  Â  setCategories([...categories, newCategory]);
Â  Â  setNewCategory("");
Â  };

Â  // Add spending handler
const handleAddSpending = async () => {
    // This check is essential for preventing empty transactions
    if (!selectedBudgetId || !transaction.category || !transaction.amount) {
        // You could add a user-facing error message here
        console.error("Please select a budget, category, and enter an amount.");
        return; 
    }
    // If validation passes, call the store function
    await addSpending(selectedBudgetId, transaction.category, Number(transaction.amount));
    // Reset the transaction form inputs
    setTransaction({ category: "", amount: "", description: "" });
};

Â  return (
Â  Â  <div className="p-6 space-y-6">
Â  Â  Â  {/* Header */}
Â  Â  Â  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold text-white">ðŸ’° Budget Setup</h1>
Â  Â  Â  Â  Â  <p className="text-gray-400 mt-1">
Â  Â  Â  Â  Â  Â  Set your savings goals, define categories, and start tracking your finances.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Goals Section */}
Â  Â  Â  <div className="bg-zinc-800/50 p-4 rounded-lg border border-zinc-600">
Â  Â  Â  Â  <h4 className="text-lg font-semibold text-white mb-2">Your Goals</h4>
Â  Â  Â  Â  <div className="flex flex-wrap gap-4 mb-4">
Â  Â  Â  Â  Â  {goals.map((goal, idx) => (
Â  Â  Â  Â  Â  Â  <div key={idx} className="flex-1 p-3 rounded-lg bg-gradient-to-r from-green-500/20 to-blue-500/20">
Â  Â  Â  Â  Â  Â  Â  <div className="text-xs text-gray-400 mb-1">{goal.name} <span className="ml-2 px-2 py-1 rounded-full bg-purple-700/40 text-white text-xs">{goal.category}</span></div>
Â  Â  Â  Â  Â  Â  Â  <div className="text-xl font-bold text-white">â‚¹{goal.amount}</div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="flex gap-2">
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  placeholder="Goal name"
Â  Â  Â  Â  Â  Â  value={newGoal.name}
Â  Â  Â  Â  Â  Â  onChange={e => setNewGoal({ ...newGoal, name: e.target.value })}
Â  Â  Â  Â  Â  Â  className="px-3 py-2 rounded bg-zinc-900 text-white border border-zinc-700"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  placeholder="Amount"
Â  Â  Â  Â  Â  Â  value={newGoal.amount}
Â  Â  Â  Â  Â  Â  onChange={e => setNewGoal({ ...newGoal, amount: e.target.value })}
Â  Â  Â  Â  Â  Â  className="px-3 py-2 rounded bg-zinc-900 text-white border border-zinc-700"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  value={newGoal.category}
Â  Â  Â  Â  Â  Â  onChange={e => setNewGoal({ ...newGoal, category: e.target.value })}
Â  Â  Â  Â  Â  Â  className="px-3 py-2 rounded bg-zinc-900 text-white border border-zinc-700"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <option value="">Select Category</option>
Â  Â  Â  Â  Â  Â  {categories.map((cat, idx) => (
Â  Â  Â  Â  Â  Â  Â  <option key={idx} value={cat}>{cat}</option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={handleAddGoal}
Â  Â  Â  Â  Â  Â  className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-500 transition-all"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Add Goal
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Categories Section */}
Â  Â  Â  <div className="bg-zinc-800/50 p-4 rounded-lg border border-zinc-600">
Â  Â  Â  Â  <h4 className="text-lg font-semibold text-white mb-2">Categories</h4>
Â  Â  Â  Â  <div className="flex flex-wrap gap-2 mb-4">
Â  Â  Â  Â  Â  {categories.map((cat, idx) => (
Â  Â  Â  Â  Â  Â  <span key={idx} className="px-3 py-1 rounded-full bg-gradient-to-r from-purple-600/30 to-blue-600/30 text-white text-xs font-medium border border-zinc-700">
Â  Â  Â  Â  Â  Â  Â  {cat}
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="flex gap-2">
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  placeholder="Add category"
Â  Â  Â  Â  Â  Â  value={newCategory}
Â  Â  Â  Â  Â  Â  onChange={e => setNewCategory(e.target.value)}
Â  Â  Â  Â  Â  Â  className="px-3 py-2 rounded bg-zinc-900 text-white border border-zinc-700"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={handleAddCategory}
Â  Â  Â  Â  Â  Â  className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-500 transition-all"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Add Category
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>


<CreateBudgetForm/>

Â  Â  Â  {/* Transaction Section */}
Â  Â  Â  <div className="bg-zinc-800/50 p-4 rounded-lg border border-zinc-600">
Â  Â  Â  Â  <h4 className="text-lg font-semibold text-white mb-2">Add Transaction</h4>
Â  Â  Â  Â  <div className="flex gap-2 mb-2">
Â  Â  Â  Â  Â  {/* Dropdown to select a budget */}
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  value={selectedBudgetId}
Â  Â  Â  Â  Â  Â  onChange={e => setSelectedBudgetId(e.target.value)}
Â  Â  Â  Â  Â  Â  className="px-3 py-2 rounded bg-zinc-900 text-white border border-zinc-700"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <option value="">Select Budget</option>
Â  Â  Â  Â  Â  Â  {budgets.map((budget) => (
Â  Â  Â  Â  Â  Â  Â  <option key={budget._id} value={budget._id}>
Â  Â  Â  Â  Â  Â  Â  Â  {`${budget.period} budget`}
Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  value={transaction.category}
Â  Â  Â  Â  Â  Â  onChange={e => setTransaction({ ...transaction, category: e.target.value })}
Â  Â  Â  Â  Â  Â  className="px-3 py-2 rounded bg-zinc-900 text-white border border-zinc-700"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <option value="">Select Category</option>
Â  Â  Â  Â  Â  Â  {categories.map((cat, idx) => (
Â  Â  Â  Â  Â  Â  Â  <option key={idx} value={cat}>{cat}</option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  placeholder="Amount"
Â  Â  Â  Â  Â  Â  value={transaction.amount}
Â  Â  Â  Â  Â  Â  onChange={e => setTransaction({ ...transaction, amount: e.target.value })}
Â  Â  Â  Â  Â  Â  className="px-3 py-2 rounded bg-zinc-900 text-white border border-zinc-700"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  placeholder="Description (optional)"
Â  Â  Â  Â  Â  Â  value={transaction.description}
Â  Â  Â  Â  Â  Â  onChange={e => setTransaction({ ...transaction, description: e.target.value })}
Â  Â  Â  Â  Â  Â  className="px-3 py-2 rounded bg-zinc-900 text-white border border-zinc-700"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={handleAddSpending}
Â  Â  Â  Â  Â  Â  className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-500 transition-all"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Add
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

{/* Budget Overview Section */}
<div className="bg-zinc-800/50 p-4 rounded-lg border border-zinc-600">
  <h4 className="text-lg font-semibold text-white mb-2">Budget Overview</h4>
  {budgets.map((budget) => (
    <div
      key={budget._id}
      className="p-4 mb-4 rounded-lg bg-gradient-to-r from-blue-500/10 to-purple-500/10"
    >
      <div className="flex justify-between items-center mb-2">
        <span className="text-white font-medium capitalize">
          {budget.period} Budget
        </span>
        <span className="text-gray-300">
          â‚¹{budget.totalSpent} / â‚¹{budget.totalBudget}
        </span>
      </div>

      {/* Overall progress bar */}
      <div className="w-full bg-zinc-700 h-3 rounded mb-4">
        <div
          className="bg-green-500 h-3 rounded"
          style={{
            width: `${(budget.totalSpent / budget.totalBudget) * 100}%`,
          }}
        />
      </div>

      {/* Categories */}
      <div className="space-y-3">
        {budget.categories.map((cat) => (
          <div key={cat._id} className="p-2 rounded bg-zinc-900/60">
            <div className="flex justify-between items-center mb-1">
              <span className="text-white text-sm">{cat.name}</span>
              <span className="text-gray-400 text-sm">
                â‚¹{cat.spent} / â‚¹{cat.allocated || budget.totalBudget}
              </span>
            </div>

            {/* Category progress bar */}
            <div className="w-full bg-zinc-700 h-2 rounded">
              <div
                className="bg-purple-500 h-2 rounded"
                style={{
                  width: `${
                    ((cat.spent || 0) /
                      (cat.allocated || budget.totalBudget)) *
                    100
                  }%`,
                }}
              />
            </div>
          </div>
        ))}
      </div>
    </div>
  ))}
</div>


Â  Â  </div>




);
};

export default Budget;